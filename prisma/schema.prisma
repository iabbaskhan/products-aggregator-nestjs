generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Provider {
  id        String   @id @default(cuid())
  name      String   @unique
  baseUrl   String
  apiKey    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  products Product[]

  @@map("providers")
}

model Product {
  id          String   @id @default(cuid())
  externalId  String
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  currency    String   @default("USD")
  availability Boolean @default(true)
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  providerId String
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  priceHistory PriceHistory[]

  @@unique([externalId, providerId])
  @@map("products")
}

model PriceHistory {
  id        String   @id @default(cuid())
  price     Decimal  @db.Decimal(10, 2)
  currency  String   @default("USD")
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("price_history")
}

model CronLog {
  id            String   @id @default(cuid())
  type          String
  status        String
  result        Json
  error         Json?
  startTime     DateTime
  endTime       DateTime
  retryCount    Int?
  slackNotified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  @@map("cron_logs")
}
